AWS API GATEWAY OVERVIEW: Build, Deploy, and Manage APIs.
	APIs: Interfaces we can expose to other people.

	API GATEWAY CAN: Build and Deploy a REST API
		- Handle API Versioning (v1, v2...)
		- Handle different environments (dev, test, prod...)
		- Handle security (Authentication and Authorization)
		- Create API keys, handle request throttling
		- Swagger / Open API import to quickly define APOs
		- Transform and validate requests and responses
		- Generate SDK and APO specifications
		- Cache API responses

	API GATEWAY INTEGRATIONS:
		OUTSIDE OF VPC:
			- AWS Lambda (most popular / powerful)
			- Endpoints on EC2
			- Load Balancers
			- Any AWS Service
			- External and publicly accessiblt HTTP endpoints
		Inside OF VPC:
			- AWS Lambda in your VPC
			- EC2 endpoints in your VPC

	HOW TO ENABLE/USE:
		Amazon API Gateway -> Create New API<endpoint: Regional -> 
		Actions -> Create Method -> <GET> -> Integration type<Lambda Function> -> Lambda Pro			xy Configuration<Unchecked>
	
	DEPLOYMENT STAGES:
		- Making changes in the API Gateway does not mean they're effective.
		- You need to make a "deployment" for them to be in effect.
		- It's a common source of confusion.
		- Changes are deployed to "Stages" (dev, test, prod...)
		- Use the naming you like for staged
		- Each stage has it's own configuration parameters
		- Stages can be rolled back as a history of deployments is kept.

	STAGE VARIABLES:
		- Stage variables are like environment variables for API Gateway
		- Use them to change often changing configuration values
		They can be used to:
			- Lambda function ARN
			- HTTP Endpoint
			- Parameter mapping techniques
		USE CASES: 
			- Configure HTTP endpoints your stages talk to (dev, test, prod)
			- Pass configuration parameters to AWS Lambda through mapping templates
		- Stage variables are passed to the "context" object in AWS Lambda.

	STAGE VARIABLES & LAMBDA ALIASES:
		- We create a stage variable to indicate the corresponding Lambda alias.
		- Our API gateway will automatically invoke the right Lambda function!

	CANARY DEPLOYMENTS: Blue Green Deployment with API Gateway and AWS Lambda
		- Test the improvements of API before deploying ("going All In")
		- CHoose the % of traffic the canary channel receives.
		- Metrics & Logs are separate (for better monitoring)
		- Test two versions at the same time. 
 	USING STAGES:
		Amazon API Gateway -> Resources -> Actions -> Deploy API -> <New Stage> -> Deploy
		 -> Invoke URL!
		Stage Variables -> Name<alias> -> Value<Dev>

	MAPPING TEMPLATES:
		- Mapping templates can be used to modify request / responses
		- Rename parameters
		- Modify body content
		- Add headers
		- Map JSON to XML for sending to backend or back to client
		- Uses Velocity Template Language (VTL): for look, if, etc...
		- Filter output results (remove unecessary data) 

		HOW TO USE: 
			Amazon API Gateway ->	Resources ->	<Choose Endpoint> ->	Integration Response 			-> Expand <Arrow Down>  ->	Expand <Mapping Templates> ->		application/json 
			-> Generate template<Empty> ->	$inputRoto

	SWAGGER / OPEN API SPEC: Common way of defining REST APIs, using API definition as code.
		
	CACHING API RESPONSES:
		- Cashing reduced the number of calls made to the backend.
		- Default TTL: 300 seconds, max: 3600 seconds
		- Cache capacity between 0.5GB to 237GB
		- Possible to override cache settings for specific methods
		- Caches are defined per stage
		- Cache encryption option
		- Able to flush the entire cache (invalidate it) immediately
	*** Clients can invalidate the cache with header: "Cache-Control: max-age=0" (with proper IAM Authorization)
	
	HOW TO ENABLE CACHE: Amazon API Gateway -> Stages -> Dev -> Enable API cache

	API GATEWAY LOGGING, MONITORING, TRACING:
		CLOUDWATCH LOGS:
		- Enable CloudWatch Logging at the Stage level (with log level)
		- Can override settings on a per APO basis (ex: ERROR, DEBUG, INFO)
		- Log contains information about request / response body
		CLOUDWATCH METRICS:
		- Metrics are by stage
		- Possibility to enable detailed metrics
		X-RAY:
		- Enable tracing to get extra information about requests in APO Gatewat
		- X-RAY API Gateway + AWS Lambda gives you the full picture.
	HOW TO ENABLE:
	(1) Amazon API Gateway -> Settings -> CloudWatch Log ARN for API Gateway
	(2) IAM ->  Role -> Create Role -> API Gateway -> AmazonAPIGatewayPushToCloudWatchLogs
	(3)Amazon API Gateway -> Stages -> dev -> Logs/Tracing -> Enable CloudWatch Logs
		

	CROSS ORIGIN RESOURCE SHARING (CORS):
		- CORS must be enabled when you receive API calls from another domain.
		- The OPTIONS pre-flight request must contain the following headers:
			- Access-Control-Allow-Methods
			- Access-Control-Allow-Headers
			- Access-Control-Allow-Origin
		- CORS can be enabled through the console

		TO ENABLE CORS: Amazon API Gateway -> Resources -> root("/") -> Enable CORS
		
	USAGE PLANS & API KEYS:
		Usage Plans:
			- Throttling: set overall capacity and burst capacity.
			- Quotas: number of requests made per day / week / month
			- Associate with desired API Stages
		API Keys:
			- Generate one per customer
			- Associate with usage plans
		- Ability to track usage for API Keys (Ex: To sell API to others)


AMAZON API GATEWAY - SECURITY:
	IAM PERMISSIONS: 
		- Create an IAM policy authorization and attach to User / Role
		- API Gateway verifies IAM Permissions passed by calling application
		- Good to provide access within your own infrastructure
		- Leverages "Sig v4" capability where IAM credential are in headers
	LAMBDA AUTHORIZERS (formerly Custom AUTHORIZERS):
		- Uses AWS LAmbda to validate the token in header being passed
		- Option to cache result of authentication
		- Helps to use OAuth / SAML / 3rd party type of authentication
		- Lambda must return an IAM policy for the user.
		- Pay per Lambda invocation
	COGNITO USER POOLS(Kind of like MFA):
		- Cognito fully manages user lifecyycle
		- API Gateway verifies identify automatically from AWS Cognito
		- No custom implimentation required
		- Cognito only helps with authentication, not authorization
		- Can be backed by Facebook, Google login, etc
		- must impliment authorization in backend

