DynamoDB Overview: NOSQL Serverless Database
	- NoSQL DB
	- Managed, Key Value, Document
	- Serverless
	-------------------------------------------------------------------------------------
	NOSQL DATABASES: 
		- NoSQL databases are: non-relational, distributed.
		- NoSQL databases: MongoDB, DynamoDB, etc. 
		- They do not support join.
		- Allows website scalability
	-------------------------------------------------------------------------------------
	DYNAMODB: 
		- Fully Managed, Highly available, replicated across 3 AZ.
		- Millions of requests per seconds, trillions of rows, 100TB or storage.
		- Low cost, auto scaling capabilities.
	-------------------------------------------------------------------------------------
	BASICS:
		- DynamoDB is made of Tables
		- Each Table has a Primary Key
		- Each item has Attributes
		- Maximum size of an item is 400KB.
	-------------------------------------------------------------------------------------
	PRIMARY KEYS:
		(Option 1):
		- Partition key ONLY (HASH): Must bediverse so that the data is distributed.
		
		(Option 2):
		- Partition key + Sort Key:
			- The combination must be unique
			- Data is grouped by partition key
			- Sort Key==Range Key
	-------------------------------------------------------------------------------------
	DYNAMO_DB THROUGHPUT:
		- Table MUST provision read & write capacity units. 
	-------------------------------------------------------------------------------------
	WRITE CAPACITY UNITS(WCU): 
	- One write capacity unit represents one write per second for an item up to 1KB in size.
	- If the items are larger than 1KB, more WCU.
	
	HOW MANY WCU ARE NEEDED?:
	*Example 1: We write 10 objects per second of 2 KB each.   -->  We need 2 * 10 = 20WCU
	
	*Example 2: We write 6 objects per second of 4.5 KB each.  -->  We need 6 * 5 = 30WCU

	*Example 3: We write 120 objects per minute of 2 KB each.  -->  We need 120/60 * 2 = 4WCU

*	|	   WCU = (numberOfObjects)/Seconds * KBAmount	         |
	-------------------------------------------------------------------------------------
	READ CAPACITY UNITS(RCU):
		- One read capacity unit represents either:
		  1 Strongly_Consistent_Read per second for an item up to 4 KB in size.
		     OR				OR			      OR
		  2 Eventually_Consistent_Reads per second for an item up to 4 KB in size.
		- If the items are larger than 4KB, more RCU.

	(1) EVENTUALLY CONSISTENT READS: Occur following a: READ just after a WRITE
	(2) STRONGLY   CONSISTENT READS: Occur following a: READ just after a WRITE
		- To set: set "ConsistentRead" parameter to True.

	HOW MANY RCU ARE NEEDED?:
	*Example 1: 10 strongly consistent reads per second of 4 KB each.
		We need (10) * (4KB/4KB=1KB) = 10RCU
	*Example 2: 16 eventually consistent reads per second of 12 KB each.
		We need (16/2 = 8) * ( 12KB/4KB = 3KB) = 24RCU
	*Example 3: 10 strongly consistent reads per second of 6 KB each.
		We need (10) * (8KB/4KB=2KB) = 20RCU

*       | RCU = (numberOfObjects( /2 if EventuallyConsistentRead ) * (KBCeilingAmount/4KB) |
	-------------------------------------------------------------------------------------
*        WCU and RCU are spread evenly between partitions.

	THROTTLING: ProvisionedThroughputExceededExceptions
		
		REASONS:
			- Hot Keys: One partition key is being processed too many times.
			- Hot partitions
			- Very large items: remember RCU and WCU depends on the size of the items.

		SOLUTIONS:
			- Exponential back-off when exception is encountered (already in SDK)
			- Distribute your partition key(s) as much as possible.
			- If RCU issue, we can use DynamoDB Accelerator (DAX).
	-------------------------------------------------------------------------------------
	DYNAMODB APIS:
		WRITING DATA:
			- PutItem - Write data to DynamoDB (full replace) 
			- UpdateItem - Update in DynamoDB (update partial attributes)
			- Conditional Writes: Accept a write/update only if conditions are respected, otherwise reject
			- Helps with concurrent access
		DELETING DATA:
			- DeleteItem: delete an individual row, Able to perform a conditional delete
			- DeleteTable: Delete a whole table and all of it's items, efficient method

		BATCH WRITES:
			- BatchWriteItem:
				- Up to 25 PutItem and / or DeleteItem in one call
				- Up to 16MB of data written
				- Up to 400KB of data per item.

			* Batching allows you to save in latency
			* Operations are done in parallel for better efficiency
			* It's possible for part of a batch to fail, in which case we have to try the failed items (using exponential backoff algorithm.)

		READING DATA:
			- GetItem:
				- Read based on primary Key
				- Eventually consistent by Default
				- ProjectionExpression can be specified to include only certain attributes.
			- BatchGetItem:
				- Up to 100MB items
				- Up to 16MB of data
				- Items are retrieved in parallel to minimize latency

		QUERYING DATA:
			- Query returns items based on:
			(1) PartitionKey Value (must be = operator)
			(2) SortKey value 
			(3) FilterExpression to further filter.
		
			Returns:
				- Up to 1MB of data
				- Or numnber of items specified in Limit.
			* Able to do pagination on the results
			* Can query table, a local secondary index, or a global secondary index.

		SCANNING DATA:
			- Scan sscans the entire table and then filters out data(Inefficient)
			- Returns up to 1MB of data - Pagination to keep on reading
			- Consumed a lot of RCU
			- For faster performance, use parallel scans.
	--------------------------------------------------------------------------------
	LOCAL SECONDARY INDEX (LSI):              Local to the partition key
		- Alternate range key for your table, local to the hash key.
		- Up to five secondary indexes per table
		- The sort key consists of exactly one scalar attribute
		- Must be a scalar String, Number, or Binary
		- LSI must be defined at table creation time.
		
	GLOBAL SECONDARY INDEX (GSI):					   A whole new table
		- To speed up queries on non-key attributes.
		- GSI = partition key + optional sort key
		- The index is a new table and we can project attributes to it.
		- INCLUDE: to specify extra attributes to project
		- ALL: to use attributes from main table.

	INDEXES AND THROTTLING:
		GSI:
		- If the writes are throttled on the GSI, then the main table will be throttled	
		- Even if the WCU on the main table are fine.
		- Choose your GSI partition key carefully!
		- Assign your WCU capacity carefully!				
		
		LSI:
		- Uses the WCU and RCU of the main table
		- No special throttling considerations

	DYNAMODB CONCURRENCY:
	- Conditional Update / Delete: Means that you can ensure an item hasn't changed before altering it.
	* That makes DynamoDB an optimistic locking / concurrency database
	---------------------------------------------------------------------------------------
	DYNAMOBD ACCELERATOR (DAX): A Seemless cache for DynamoDB, no application re-write.
		- Writes go through DAX to DynamoDB.
		- Micro second latency for cached reads & queries.
		- Solves the Hot Key problem (roo many reads).
		- 5 minutes TTL for cache by default.
		- Up to 10 nodes in the cluster.
		- Multi AZ (3 nodes minimum recommended for production).
		- Secure (Encryption at rest with KMS, VPC, IAM, CloudTrail).

		TOO ENABLE DAX: DAX->DASHBOARD->NAME->NODETYPE->CLUSTER_SIZE->ENABLE_ENCRYPTION-> 
				Give an IAM Role to DAX and grant it access to your DynamoDB Tables
				-> Select a subnet group-> Security groups
		* DAX is not in the free-tier environment.
	-----------------------------------------------------------------------------------------
	DYNAMODB STREAMS: Changes in DynamoDB(Create, Update, Delete)can end up in a DynamoDB Stream			- This stream can be read by AWS Lambda, and we can then do: 
			- React to changes in real time (welcome email to new users)
			- Analytics
			- Create derivative tables / views
			- Insert into ElasticSearch
		- Could impliment cross regon replication using streams.
		- Stream has 24 hours of data retention.
		HOW TO ENABLE STREAMS:
			- DYNAMODB -> Tables -> Stream Details -> Manage Stream<new & old images>
			 -> triggers -> Create Trigger ---> IAM -> New Role->Add permissions  -> 
			AWSLambdaDynamoDBExecutionRole
	------------------------------------------------------------------------------------------
	DYNAMODB - Time to Live (TTL):
		-  TTL - automatically delete an item after an expire date/time.
		- TTL is a background task operated by the DynamoDB service itself.
		- Helps reduce storage and mannege the table size over time.
		- Helps adhere to regulatory norms.
		- TTL is enabled per row (you define a TTL column, and add a date there)
		- Deleted items due to TTL are also deleted in GSI/LSI.
		HOW TO ENABLE TTL:
			DynamoDB -> Create Table<DemoTTL><userID>  -> Create Item ->
			Append<expire_on epoch_timestamp>: (From: www.epochconverter.com) ->
			Overview -> TTL Attributes -> Manage TTL -> TTL attribute<expire_on> -> 
	-------------------------------------------------------------------------------------------
	DYNAMODB CLI:
		--projection-expression : To specify a list of attributes you may want to retreive
				
		--filter-expression : filter results
	
	General CLI pagination options including DynamoDB / S#:
		-Optimization:
			--page-size: full dataset is still received but each API call will request less data (helps avoid timeouts).
		-Pagination:
			--max-items : max number of results returned by the CLI 
					-> Returns "NextToken".
			--starting-token : specify the last received "NextToken" to keep on reading

	HANDS-ON CLI:
	# Demo Projection Expression
		aws dynamodb scan --table-name UserPosts --projection-expression "user_id, content" 			--region us-east-1

	# Demo Filter Expression
		aws dynamodb scan --table-name UserPosts --filter-expression "user_id = :u" --expres			sion-attribute-values '{ ":u": {"S":"124usersoi3"}}' --region us-east-1

	# Page Size demo: will do 1 API call if you have 3 Items
		aws dynamodb scan --table-name UserPosts --region us-east-1

	# Will do 3 API calls if you have 3 Items
		aws dynamodb scan --table-name UserPosts --region us-east-1 --page-size 1

	# Max Item demo:
		aws dynamodb scan --table-name UserPosts --region us-east-1 --max-items 1

	# Fetch the next item
		aws dynamodb scan --table-name UserPosts --region us-east-1 --max-items 1 --starting			-token eyJFeGNsdXNpdmVTdGFydEtleSI6IG51bGwsICJib3RvX3RydW5jYXRlX2Ftb3VudCI6IDF9

	# Fetch the next item
		aws dynamodb scan --table-name UserPosts --region us-east-1 --max-items 1 --starting			-token eyJFeGNsdXNpdmVTdGFydEtleSI6IG51bGwsICJib3RvX3RydW5jYXRlX2Ftb3VudCI6IDJ9
	-------------------------------------------------------------------------------------
	DYNAMODB TRANSACTIONS: "Think Bank Transaction" -> Write to both tables, or none!
		- New feature from November 2018
		- Transaction = Ability to Create / Update / Delete multiple rows in different tables at the same time.
		- "All or Nothing" type of operation.
		- Write Modes: Standard, Transactional
		- Read Modes: Eventual Consistency, Strong Consistency, Transactional
		- Consumes 2x of WCU / RCU
	-------------------------------------------------------------------------------------
	DYNAMODB SECURITY & OTHER:
		SECURITY:
		- VPC Endpoints available to access DynamoDB without internet.
		- Access fully controlled IAM
		- ENcryption at rest using KMS
		- Encryption in transit using SSL / TLS
		BACKUP AND RESTORE FEATURE AVAILABLE:
		- Point in time restore RDS
		- No performance impact
		GLOBAL TABLES
		- Multi region, fully replicated, high performance
    * Amazon DMS can be used to migrate data to DynamoDB (from MongoDB, Oracle, MySQL, S3, etc...))
    * You can launch a local DynamoDB on your computer for development purposes.



