AMAZON ELASTIC CONTAINER SERVICE OVERVIEW:

	WHAT IS DOCKER?: A software development platform to deploy apps.
	
	- Apps are packaged in containers that can be run on any OS
	- Apps run the same, regardless of where they are run
		- Any Machine
		- No compatibility issues
		- Predictable behavior
		- Less work
		- Easier to maintain and deploy
		- Works with any language, any OS, any technology

	WHERE ARE DOCKER IMAGES STORED?:
	- Docker images are stored in Docker Repositories

	Public: Docker Hub https://hub.docker.com/
		- Find base images for many technologies or OS
		- Ubuntu
		- MySQL
		- NodeJS, Java...
	Private: Amazon Elastic Container Registry (ECR)

	 
	Download Docker at: https://www.docker.com/get-started   ->   

	Dockerfile  ->build->  Docker Image  ->run->  Docker Container
				
	DOCKER CONTAINER MANAGMENT
		Three Choices:
			- ECS: Amazon's own platform
			- Fargate: Amazon's own Serverless platform
			- EKS: Amazon's managed Kubernetes (open source)

ECS CLUSTERS OVERVIEW:
	- ECS Clusters are logical grouping of EC2 instances.
	- EC2 instances run the ECS agent (Docker container)
	- The ECS agents registers the instance to the ECS cluster
	- The EC2 instances run a special AMI, made specifically for ECS


	ECS TASK DEFINITIONS: Task definitions are metadata in JSON form to tell ECS how to run a Docker Container.

	- Contains information around:
		- Image Name
		- Port Binding for container and Host
		- Memory and CPU required
		- Environment variables
		- Networking information

ECS + X-RAY INTEGRATION:
	ECS CLUSTER:
	XRAY CONTAINER AS A DAEMON: XRAY Daemon Container on each EC2 Instance.
	ECS CLUSTER:
	XRAY CONTAINER AS A "SIDE CAR": Run 1 XRAY Daemon container alongside each App Container. 
	FARGATE CLUSTER:
	XRAY CONTAINER AS A "SIDE CAR"Also have to Run 1 XRAY Daemon container alongside each App Container.


EXAMPLE TASK DEFINITION: 

Map the container port of the XRAY Daemon to 2000 UDP:
"containerPort": 2000,
"protocol": "udp" 

Set an environment variable called AWS_XRAY_DAEMON_ADDRESS:
{"name" : "AWS_XRAY_DAEMON_ADDRESS", "value" : "xray-daemon:2000"}

Link these two containers from a Networking standpoint:
"links": [
"xray-daemon"
]
 
	 
