AWS LAMBDA OVERVIEW:

	SERVERLESS: A new paradigm in which developers don't have to manage servers anymore.
	
	PRICING: Pay per request and compute time.
	- Free Tier: 1,000,000 AWS Lambda requests and 400,000 GB's of compute time.
	
	- Integrated with CloudWatch for easy monitoring.
	- Allocate resources per function (up to 3GB of RAM)


	ENVIRONMENT VARIABLES: Making your code change behavior without changing your code.
		import os

		os.getenv("environment_name")
		print("environment_name is: " + environment_name)

	CONCURRENCY AND THROTTLING:
	- Concurrency: up to 1000 executions at same time. Can be increased through ticket.		
	- Throttling: Each invocation over the concurency limit will trigger a "Throttle".

 	THROTTLE BEHAVIOR:
		- If synchronous invocation => return ThrottleError - 429
		- If asynchronous invocation => retry automatically and then go to Dead Letter Queue
			* Default: 2 tries.

	DLQ(DEAD LETTER QUEUE):
		- In Lambda, can be either a SNS topic or SQS queue
		- Original event payload is sent to DLQ.
		- Needs IAM Permissions to write to DLQ.

LAMBDA LIMITS: ERROR QUESTIONS:
	EXECUTION:
		Memory Allocation: 128MB - 3008MB (64MB Increments)
		Maximum Execution Time: 300/900 Seconds(5/15 minutes)
		Disk Capacity in the "function container" (in/tmp): 512MB
		Concurrency limit: 1000

	DEPLOYMENT:
		Lambda function deployment size(compressed.zip): 50MB
		Size of uncompressed deployment(code + dependencies): 250MB
		Can use the /tmp directory to load other files at startup
		Size od environment variables: 4KB

AWS LAMBDA VERSIONS:
	- Initial Version: $LATEST(mutable)
	
	- When ready to publish: we create a version (V1, Immutable; V2, Immutable)
	
	- Versions get their own ARM(Amazon Resource Name): So each version can be accessed.
	
	- Version = code + configuration()nothing can be changed - immutable.

AWS LAMBDA ALIASES: 
	- Aliases are "pointers" to Lambda function versions.
	- Aliases are mutable, while Versions are Immutable.
	- Can define a "Dev", "test", "prod" aliases and have them point at different LambdaVersions
	- Can enable Blue / Green deployment by assigning weights to lambda functions.
	- Aliases enable stable configuration of our events triggers / destinations.
	- Aliases have there own ARN(Amazon Resource Name).

LINKING EXTERNAL DEPENDENCIES:
	- You need to install the apckages alongside your code and zip it together
		- For Node.js, use npm & "node_modules" directory
		- For Python, use pip --target options
		- For Java, include the relevant .jar files
	- Upload the zip straight to Lambda if less than 50MB, else to S3 first.
	- Native libraries work: they need to be compiled on Amazon Linux.

LAMBDA AND CLOUDFORMATION:
	(1) Must store Lambda zip in S3
	(2) Must refer the S3 zip location in the CLoudFormation code.


BEST PRACTICES:
	(1) Perform heavy duty work outside of your function handler:
		- Connect to databases outside of your function handler.
		- Initialize the AWS SDK outside of your function handler.
		- Pull in dependencies or datasets outside of your function handler.

	(2) Use Environment variables for:
		- Database COnnection Strings, S3 bucker, etc... do not put directly in code.
		- Passwords, sensitive values... they can be encrypted using KMS.
		- Environment variables have 4KB maximum.

	(3) Minimize your deployment package size to run it's necessities:
		- Break down the function if need be.
		- Remember the AWS Lambda Limits: (50MB Compressed), (250MB Uncompressed),

	(4) Avoid Recursive code!

	(5) Don't put yout Lambda function in a VPC unless you absolutely have to.


LAMBDA@EDGE: 
	USES:
		- Run a GLOBAL AWS Lambda alongside CloudFront
		- Impliment request filtering before reaching your application

	* CloudFront: a CDN(Content delivery network): ALlows to deploy content GLOBALLY.
	
	WHAT CAN YOU DO: Change CLoudFront requests and responses:
		- After CloudFront: Receives a request from a Viewer (Viewer Request).
		- Before CloudFront: Forwards the request to the the origin (Origin Request).
		- After CloudFront: Receives the response from the origin (Origin Response). 
		- Before CloudFront: Forwards the response from the origin (Viewer Response).
	* You can also generate responses without any requests.



